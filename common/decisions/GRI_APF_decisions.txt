@GRI_AP_MANUFACTURUM_UPGRADE_THRESHOLD = 10
@GRI_AP_NEW_INQUISITOR_THRESHOLD = 20

GRI_AP_sc_inquisition_cat = {
	GRI_AP_sc_start_inquisition_target_country = {
		cost = 20
		allowed = {
			OR = {
				original_tag = GRI
				original_tag = FAT
			}
		}

		target_array = ROOT.GRI_AF_inquisitionable_cores
		target_non_existing = yes

		visible = {
			has_completed_focus = GRI_AF_sc_territory_integration
			FROM = { exists = no }
			check_variable = {
				ROOT.GRI_AF_inquisitors_available > 0
			}
			is_in_array = {
				array = ROOT.GRI_AF_inquisitionable_cores
				value = FROM
			}
		}
		available = {
			check_variable = {
				ROOT.GRI_AF_inquisitors_available > 0
			}
			
			meta_trigger = {
				text = {
					controls_state = GRI_AF_[TAG_COUNTRY]_inquisition_state
				}

				TAG_COUNTRY = "[FROM.GetTag]"
			}
		}

		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision GRI_AP_sc_inquisition_target_country target: [From.GetName]"
			
			meta_effect = {
				text = {
					var:GRI_AF_[TAG_COUNTRY]_inquisition_state = {
						add_to_array = {
							array = ROOT.GRI_AF_under_inquisition_cores
							value = id
						}
					}
				}

				TAG_COUNTRY = "[FROM.GetTag]"
			}

			log = "[FROM.GetName]"

			add_to_array = { GRI_AF_under_inquisition_tags = FROM }
			remove_from_array = {
				array = ROOT.GRI_AF_inquisitionable_cores
				value = FROM
			}
			subtract_from_variable = { ROOT.GRI_AF_inquisitors_available = 1 }
		}
	}

	GRI_AP_sc_dispatch_inquisitors_target_state = {
		allowed = {
			OR = {
				original_tag = GRI
				original_tag = FAT
			}
		}

		target_array = ROOT.GRI_AF_under_inquisition_cores
		state_target = yes
		on_map_mode = map_and_decisions_view
		days_remove = 30

		visible = {
			has_completed_focus = GRI_AF_sc_territory_integration
			is_in_array = {
				array = ROOT.GRI_AF_under_inquisition_cores
				value = FROM
			}
		}
		available = {
			FROM = {
				any_state_division = {
					division_has_majority_template = griffon_inquisitors
				}
				is_fully_controlled_by = ROOT
			}
		}
		modifier = {
			political_power_factor = -0.10
			weekly_manpower = -400
		}

		cancel_trigger = {
			NOT = {
				FROM = {
					any_state_division = {
						division_has_majority_template = griffon_inquisitors
					}
					is_fully_controlled_by = ROOT
				}
			}
		}

		remove_effect = {
			log = "[GetDateText]: [Root.GetName]: Remove decision GRI_AP_sc_dispatch_inquisitors_target_state target: [From.GetName]"
			
			FROM = {
				# Find which tag need to be cored
				set_temp_variable = { temp_core_tag = -1 }
				for_each_loop = {
					array = state_original_cores
					value = state_core_tag

					if = {
						limit = {
							is_in_array = {
								array = ROOT.GRI_AF_under_inquisition_tags
								value = state_core_tag
							}
						}

						set_temp_variable = { temp_core_tag = state_core_tag }
						set_temp_variable = { break = 1 }
					}
				}
				
				if = {
					limit = {
						is_in_array = {
							array = ROOT.GRI_AF_inquisition_events
							value = temp_core_tag
						}
					}

					# Special state event for certain countries
					meta_effect = {
						text = {
							set_variable = { title_event_inquisition  = token:imperium_4002_[TARGET_TAG]_t_[ROOT_TAG] }
							set_variable = { desc_event_inquisition   = token:imperium_4002_[TARGET_TAG]_d_[ROOT_TAG] }
							set_variable = { resp_event_inquisition   = token:imperium_4002_[TARGET_TAG]_a_[ROOT_TAG] }
							set_variable = { effect_event_inquisition = token:imperium_4002_[TARGET_TAG]_e }
						}
						
						TARGET_TAG = "[?temp_core_tag.GetTag]"
						ROOT_TAG = "[ROOT.GetTag]"
					}
					state_event = {
						id = imperium.4002
						trigger_for = ROOT
					}
				}
			}

			remove_from_array = {
				array = ROOT.GRI_AF_under_inquisition_tags
				value = temp_core_tag
			}
			remove_from_array = {
				array = ROOT.GRI_AF_under_inquisition_cores
				value = FROM
			}
			add_to_array = {
				array = ROOT.GRI_AF_purified_cores
				value = temp_core_tag
			}
			add_to_variable = { GRI_AF_pacified_tag_nmb = 1 }

			# Check the regional inquisition events
			for_loop_effect = {
				end = GRI_AF_number_region_events
				value = region
				break = region_break

				meta_effect = {
					text = {
						if = {
							limit = {
								NOT = { ROOT = {
									has_country_flag = GRI_AF_inquisition_region_[REGION_ID]_triggered
								}}
							}

							set_temp_variable = { temp_region_purified = 1 }
							for_each_loop = {
								array = GRI_AF_inquisition_region_[REGION_ID]
								value = purified_tag
								index = temp_tag_index
								
								if = {
									limit = {
										NOT = {
											is_in_array = {
												array = ROOT.GRI_AF_purified_cores
												value = purified_tag
											}
										}
									}

									set_temp_variable = { temp_region_purified = 0 }
									set_temp_variable = { break = 1 }
								}
							}
						}
					}

					REGION_ID = "[?region]"
					ROOT_TAG  = "[ROOT.GetTag]"
				}

				if = {
					limit = {
						check_variable = { temp_region_purified = 1 }
					}

					meta_effect = {
						text = {
							set_variable = { title_event_inquisition  = token:imperium_4002_region_[REGION_ID]_t_[ROOT_TAG] }
							set_variable = { desc_event_inquisition   = token:imperium_4002_region_[REGION_ID]_d_[ROOT_TAG] }
							set_variable = { resp_event_inquisition   = token:imperium_4002_region_[REGION_ID]_a_[ROOT_TAG] }
							set_variable = { effect_event_inquisition = token:imperium_4002_region_[REGION_ID]_e }
							set_country_flag = GRI_AF_inquisition_region_[REGION_ID]_triggered
						}

						REGION_ID = "[?region]"
						ROOT_TAG  = "[ROOT.GetTag]"
					}
					
					state_event = {
						id = imperium.4002
						trigger_for = ROOT
					}
				}
			}

			# Check new inquisitor event
			if = {
				limit = {
					check_variable = {
						var = GRI_AF_pacified_tag_nmb
						value = @GRI_AP_NEW_INQUISITOR_THRESHOLD
						compare = greater_than_or_equals
					}
				}

				country_event = {
					id = imperium.4011
					days = 5
				}
			}
			# Check manufacturum upgrade event
			if = {
				limit = {
					check_variable = {
						var = GRI_AF_pacified_tag_nmb
						value = @GRI_AP_MANUFACTURUM_UPGRADE_THRESHOLD
						compare = greater_than_or_equals
					}
				}

				country_event = {
					id = imperium.4012
					days = 5
				}
			}

			# Autoset the occupation law
			if = {
				limit = {
					is_in_array = {
						array = ROOT.potential_cores
						value = temp_core_tag
					}
				}
				ROOT = { var:temp_core_tag = {
					set_occupation_law = GRI_AF_integration
				} }
			} else = {
				ROOT = { var:temp_core_tag = {
					set_occupation_law = GRI_AF_protectorate
				} }
			}

			add_to_variable = { ROOT.GRI_AF_inquisitors_available = 1 }
		}
	}
}

GRI_AP_sc_unification_war_cat = {
	GRI_AP_suprise_attack_mission = {
		allowed = {
			OR = {
				original_tag = GRI
				original_tag = FAT
			}
		}

		activation = {
			has_completed_focus = GRI_AF_sc_unification_war
			NOT = { has_country_flag = GRI_AF_started_unification_war }
		}
		available = {
			always = no
		}
		days_mission_timeout = 30

		timeout_effect = { # War with everyone (Except isolationists)
			set_global_flag = GRI_AF_unification_war_ongoing
			set_country_flag = GRI_AF_started_unification_war

			add_to_temp_array = { temp_nowar_tags = NTR }
			add_to_temp_array = { temp_nowar_tags = HLR }
			add_to_temp_array = { temp_nowar_tags = DED }
			add_to_temp_array = { temp_nowar_tags = EQC }
			add_to_temp_array = { temp_nowar_tags = BAR }
			add_to_temp_array = { temp_nowar_tags = ROOT }

			every_country = {
				limit = {
					is_griffon_continent_country = yes
					NOT = {
						is_in_array = {
							array = temp_nowar_tags
							value = id
						}
					}
					ROOT = {
						NOT = {
							has_war_with = PREV
						}
					}
				}

				ROOT = {
					declare_war_on = {
						target = PREV
						type = annex_everything
					}
					hidden_effect = {
						create_wargoal = {
							target = PREV
							type = annex_everything
						}
					}
				}
			}

			if = {
				limit = {
					original_tag = FAT
				}

				# Chaos Imperium
				news_event = {
					id = imperium_news.43
					days = 1
				}
			} else = {
				# Imperium
				news_event = {
					id = imperium_news.44
					days = 1
				}
			}
		}
	}
}

GRI_AP_shared_super_griffons_research_cat = {
	GRI_AP_super_griffons_weapon_up_1 = {
		allowed = {
			OR = {
				original_tag = GRI
				original_tag = FAT
			}
		}
		visible = {
			NOT = { has_tech = gri_ap_super_griffons_weapon_1 }
		}
		available = {
			OR = {
				has_tech = improved_infantry_weapons
				has_tech = magical_weapons
			}
		}
		days_remove = 100
		fire_only_once = yes
		modifier = {
			research_speed_factor = -0.2
		}

		remove_effect = {
			set_technology = {
				gri_ap_super_griffons_weapon_1 = 1
				popup = no
			}
			custom_effect_tooltip = GRI_AP_super_griffons_weapon_1_TT
		}
	}

	GRI_AP_super_griffons_weapon_up_2 = {
		allowed = {
			OR = {
				original_tag = GRI
				original_tag = FAT
			}
		}
		visible = {
			has_tech = gri_ap_super_griffons_weapon_1
			NOT = { has_tech = gri_ap_super_griffons_weapon_2 }
		}
		available = {
			OR = {
				has_tech = advanced_infantry_weapons
				has_tech = magical_weapons1
			}
		}
		days_remove = 100
		fire_only_once = yes
		modifier = {
			research_speed_factor = -0.2
		}

		remove_effect = {
			set_technology = {
				gri_ap_super_griffons_weapon_2 = 1
				popup = no
			}
			custom_effect_tooltip = GRI_AP_super_griffons_weapon_2_TT
		}
	}

	GRI_AP_super_griffons_armor_up_1 = {
		allowed = {
			OR = {
				original_tag = GRI
				original_tag = FAT
			}
		}
		visible = {
			NOT = { has_tech = gri_ap_super_griffons_armor_1 }
		}
		available = {
			has_tech = support_weapons2
		}
		days_remove = 100
		fire_only_once = yes
		modifier = {
			research_speed_factor = -0.2
		}

		remove_effect = {
			set_technology = {
				gri_ap_super_griffons_armor_1 = 1
				popup = no
			}
			custom_effect_tooltip = GRI_AP_super_griffons_armor_1_TT
		}
	}

	GRI_AP_super_griffons_armor_up_2 = {
		allowed = {
			OR = {
				original_tag = GRI
				original_tag = FAT
			}
		}
		visible = {
			has_tech = gri_ap_super_griffons_armor_1
			NOT = { has_tech = gri_ap_super_griffons_armor_2 }
		}
		available = {
			OR = {
				has_tech = support_weapons4
			}
		}
		days_remove = 100
		fire_only_once = yes
		modifier = {
			research_speed_factor = -0.2
		}

		remove_effect = {
			set_technology = {
				gri_ap_super_griffons_armor_2 = 1
				popup = no
			}
			custom_effect_tooltip = GRI_AP_super_griffons_armor_2_TT
		}
	}
}

GRI_AP_debug_cat = {
	GRI_AP_debug_unlock_super_griffons = {
		allowed = {
			original_tag = GRI
		}
		visible = {
			is_debug = yes
			NOT = {
				has_tech = gri_ap_super_griffons
			}
		}

		complete_effect = {
			set_technology = {
				gri_ap_super_griffons = 1
			}
		}
	}

	GRI_AP_debug_unlock_griffons = {
		allowed = {
			original_tag = GRI
		}
		visible = {
			is_debug = yes
			NOT = {
				has_tech = gri_ap_super_griffons
			}
		}

		complete_effect = {
			country_event = imperium.4006
		}
	}

	GRI_AP_debug_clean_flag_shared_conquest_tree = {
		allowed = {
			OR = {
				original_tag = GRI
			}
		}
		visible = {
			is_debug = yes
		}

		complete_effect = {
			load_focus_tree = {
				tree = imperium_focus
				keep_completed = yes
			}
			clr_country_flag = GRI_AF_shared_conquest_tree_enable
		}
	}

	GRI_AP_debug_unlock_shared_conquest_tree = {
		allowed = {
			OR = {
				original_tag = GRI
				original_tag = FAT
			}
		}
		visible = {
			is_debug = yes
		}

		complete_effect = {

			dismantle_faction = yes

			add_to_temp_array = { list_tag = MNC }
			add_to_temp_array = { list_tag = VED }
			add_to_temp_array = { list_tag = SRS }
			add_to_temp_array = { list_tag = FAT }
			add_to_temp_array = { list_tag = GRI }
			add_to_temp_array = { list_tag = STW }
			add_to_temp_array = { list_tag = BRZ }
			add_to_temp_array = { list_tag = FEA }
			add_to_temp_array = { list_tag = PYT }
			add_to_temp_array = { list_tag = ROU }
			add_to_temp_array = { list_tag = YAL }
			add_to_temp_array = { list_tag = ANG }
			add_to_temp_array = { list_tag = KAT }
			annex_country = {
				target = MNC
			}
			annex_country = {
				target = ROU
			}

			for_each_scope_loop = {
				array = list_tag
				ROOT = { end_puppet = PREV }
				if = {
					limit = {
						#NOT = {
						#	tag = MNC
						#	tag = ROU
						#}
						NOT = { ROOT = THIS }
					}

					ROOT = {
						annex_country = {
							target = PREV
						}
					}
				}
			}

			if = {
				limit = {
					original_tag = GRI
				}

				country_event = imperium.4001
			} else = {
				country_event = imperium.4000
			}
		}
	}
}

GRI_AF_war_dread_flood = {
		icon = generic_intelligence_operation
		allowed = {
		    original_tag = GRI
		}
		available = {
			is_subject = no
		}
		targets = { DED }
		targets_dynamic = yes
		target_trigger = {
			can_declare_war_on = FROM
			FROM = { 
			    original_tag = DED
			}
		}
		target_root_trigger = {
			has_completed_focus = GRI_AF_sc_griffonia_unified
		}
		visible = {
			has_completed_focus = GRI_AF_sc_griffonia_unified
			has_game_rule = {
				rule = DED_APRIL_FOOL = yes
			}
			can_declare_war_on = FROM
			FROM = {
				exists = yes
				NOT = { 
				    has_war_with = ROOT 
				}
				NOT = {
				    is_subject_of = ROOT
				}
			}
		}
		cancel_trigger = {
			OR = {
				is_subject = yes
				NOT = { can_declare_war_on = FROM }
				FROM = {
					OR = {
						exists = no
						is_subject = yes
						has_war_with = ROOT
					}
				}
			}
		}
		
		cost = 0
		fire_only_once = yes
		
		days_remove = 30
		war_with_target_on_remove = yes
		
		ai_will_do = {
			factor = 0
			modifier = {
				factor = 0
				has_war = yes
			}
		}
		
		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision GRI_war_dread target: [From.GetName]"
			FROM = {
                add_ai_strategy = {
                    type = prepare_for_war
                    id = ROOT
                    value = 1000
                }
            }
		}
		remove_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision remove GRI_war_dread target: [From.GetName]"
			FROM = {
                add_ai_strategy = {
                    type = prepare_for_war
                    id = ROOT
                    value = -1000
                }
            }
			hidden_effect = {
				create_wargoal = { 
					type = annex_everything 
					target = FROM
				}
				if = {
				    limit = {
					    FROM = {
						    is_ai = no
						}
					}
				}
			}
			declare_war_on = {
                target = FROM
                type = annex_everything
            }
		}
	}

GRI_AF_war_twilight = {
		icon = generic_intelligence_operation
		allowed = {
		    original_tag = GRI
		}
		available = {
			is_subject = no
		}
		targets = { EQS }
		targets_dynamic = yes
		target_trigger = {
			can_declare_war_on = FROM
			FROM = { 
			    original_tag = EQS
			}
		}
		target_root_trigger = {
			has_completed_focus = GRI_AF_sc_griffonia_unified
		}
		visible = {
			has_completed_focus = GRI_AF_sc_griffonia_unified
			has_game_rule = {
				rule = EQS_STATUS_APRIL_FOOLS = yes
			}
			can_declare_war_on = FROM
			FROM = {
				exists = yes
				NOT = { 
				    has_war_with = ROOT 
				}
				NOT = {
				    is_subject_of = ROOT
				}
			}
		}
		cancel_trigger = {
			OR = {
				is_subject = yes
				NOT = { can_declare_war_on = FROM }
				FROM = {
					OR = {
						exists = no
						is_subject = yes
						has_war_with = ROOT
					}
				}
			}
		}
		
		cost = 0
		fire_only_once = yes
		
		days_remove = 30
		war_with_target_on_remove = yes
		
		ai_will_do = {
			factor = 0
			modifier = {
				factor = 0
				has_war = yes
			}
		}
		
		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision GRI_war_dread target: [From.GetName]"
			FROM = {
                add_ai_strategy = {
                    type = prepare_for_war
                    id = ROOT
                    value = 1000
                }
            }
		}
		remove_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision remove GRI_war_dread target: [From.GetName]"
			FROM = {
                add_ai_strategy = {
                    type = prepare_for_war
                    id = ROOT
                    value = -1000
                }
            }
			hidden_effect = {
				create_wargoal = { 
					type = annex_everything 
					target = FROM
				}
				if = {
				    limit = {
					    FROM = {
						    is_ai = no
						}
					}
				}
			}
			declare_war_on = {
                target = FROM
                type = annex_everything
            }
		}
	}
