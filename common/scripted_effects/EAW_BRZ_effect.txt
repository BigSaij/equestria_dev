# What are these for?
add_latest_tank_licence_to_root = {
	if = {
		limit = {
			has_tech = gwtank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = gw_tank_equipment
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = basic_light_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = light_tank_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_light_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = light_tank_equipment_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_light_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = light_tank_equipment_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_light_tank_a
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = light_tank_equipment_x
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_light_tank_b
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = light_tank_equipment_x_2
			}
			cost_factor = 0
		}
	}

	if = {
		limit = {
			has_tech = basic_medium_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = medium_tank_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_medium_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = medium_tank_equipment_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_medium_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = medium_tank_equipment_3
			}
			cost_factor = 0
		}
	}

	if = {
		limit = {
			has_tech = main_battle_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = main_battle_tank_a
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_x
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = main_battle_tank_b
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_x_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = main_battle_tank_c
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_x_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = main_battle_tank_d
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_x_4
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = main_battle_tank_e
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_x_5
			}
			cost_factor = 0
		}
	}

	if = {
		limit = {
			has_tech = basic_heavy_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = heavy_tank_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_heavy_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = heavy_tank_equipment_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_heavy_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = heavy_tank_equipment_3
			}
			cost_factor = 0
		}
	}
	
	if = {
		limit = {
			has_tech = super_heavy_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = super_heavy_tank_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = super_heavy_tank_a
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = super_heavy_tank_equipment_x
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = super_heavy_tank_b
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = super_heavy_tank_equipment_x_2
			}
			cost_factor = 0
		}
	}
}

add_latest_infantry_equipment_licence_to_root = {
	if = {
		limit = {
			has_tech = infantry_weapons
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_0
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = infantry_weapons1
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_infantry_weapons
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_infantry_weapons
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_infantry_weapons_b
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_x
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_infantry_weapons_e
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_x_2
			}
			cost_factor = 0
		}
	}

	if = {
		limit = {
			has_tech = magical_weapons
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = magical_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = magical_weapons1
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = magical_equipment_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = magical_weapons2
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = magical_equipment_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = magical_weapons3
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = magical_equipment_4
			}
			cost_factor = 0
		}
	}
}

# Explanaintion for the poor soul who has to understand this:
# I'm trying to generate 3 random event options, displayed in random order, out of 5 total. 
# First, I'm doing a 5-choose-3, to choose which event options will be displayed. These are assigned to three variables
# Then, I'm picking an order to display them, which assignes the first three variables to three other ones, 
# the ones used later in the options of the event code
BRZ_noble_virtue_investment_option_generator = {
	# Step 1: Choose which options to display
	set_variable = {
		investment_option_1 = 1 # Default
	}
	set_variable = {
		investment_option_2 = 2 # Default
	}
	set_variable = {
		investment_option_3 = 3 # Default
	}
	random_list = {
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 2
			}
			set_variable = {
				investment_option_3 = 3
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 2
			}
			set_variable = {
				investment_option_3 = 4
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 2
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 3
			}
			set_variable = {
				investment_option_3 = 4
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 3
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 4
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 2
			}
			set_variable = {
				investment_option_2 = 3
			}
			set_variable = {
				investment_option_3 = 4
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 2
			}
			set_variable = {
				investment_option_2 = 3
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 2
			}
			set_variable = {
				investment_option_2 = 4
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 3
			}
			set_variable = {
				investment_option_2 = 4
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
	}
	set_variable = {
		display_option_a = investment_option_1 # default
	}
	set_variable = {
		display_option_b = investment_option_2 # default
	}
	set_variable = {
		display_option_c = investment_option_3 # default
	}
	random_list = {
		1 = {
			set_variable = {
				display_option_a = investment_option_1
			}
			set_variable = {
				display_option_b = investment_option_2
			}
			set_variable = {
				display_option_c = investment_option_3
			}
		}
		1 = {
			set_variable = {
				display_option_a = investment_option_1
			}
			set_variable = {
				display_option_b = investment_option_3
			}
			set_variable = {
				display_option_c = investment_option_2
			}
		}
		1 = {
			set_variable = {
				display_option_a = investment_option_2
			}
			set_variable = {
				display_option_b = investment_option_1
			}
			set_variable = {
				display_option_c = investment_option_3
			}
		}
		1 = {
			set_variable = {
				display_option_a = investment_option_2
			}
			set_variable = {
				display_option_b = investment_option_3
			}
			set_variable = {
				display_option_c = investment_option_1
			}
		}
		1 = {
			set_variable = {
				display_option_a = investment_option_3
			}
			set_variable = {
				display_option_b = investment_option_1
			}
			set_variable = {
				display_option_c = investment_option_2
			}
		}
		1 = {
			set_variable = {
				display_option_a = investment_option_3
			}
			set_variable = {
				display_option_b = investment_option_2
			}
			set_variable = {
				display_option_c = investment_option_1
			}
		}
	}
}

BRZ_noble_virtue_investment_option_a_effect = {
	if = {
		limit = {
			check_variable = { display_option_a = 1 } # consumer goods
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_a = 2 } # political power
		}
		add_political_power = BRZ_noble_virtue_pp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_a = 3 } # command power
		}
		add_command_power = BRZ_noble_virtue_cp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_a = 4 } # max production efficiency
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_a = 5 } # stability
		}
		add_stability = BRZ_noble_virtue_stab_cost
	}
}

BRZ_noble_virtue_investment_option_b_effect = {
	if = {
		limit = {
			check_variable = { display_option_b = 1 } # consumer goods
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_b = 2 } # political power
		}
		add_political_power = BRZ_noble_virtue_pp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_b = 3 } # command power
		}
		add_command_power = BRZ_noble_virtue_cp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_b = 4 } # max production efficiency
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_b = 5 } # stability
		}
		add_stability = BRZ_noble_virtue_stab_cost
	}
}

BRZ_noble_virtue_investment_option_c_effect = {
	if = {
		limit = {
			check_variable = { display_option_c = 1 } # consumer goods
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_c = 2 } # political power
		}
		add_political_power = BRZ_noble_virtue_pp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_c = 3 } # command power
		}
		add_command_power = BRZ_noble_virtue_cp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_c = 4 } # max production efficiency
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_c = 5 } # stability
		}
		add_stability = BRZ_noble_virtue_stab_cost
	}
}

BRZ_add_initial_party_support = {
	# Kinda default values (works for Herzland)
	add_to_array = { BRZ_local_party_support = 0.3 } # Pan-Griffonian Harmonic Party
	add_to_array = { BRZ_local_party_support = 0.1 } # Agrarian Alliance Of Griffonia
	add_to_array = { BRZ_local_party_support = 0.08 } # Peasant And Workers Party Of The Griffonian Empire
	add_to_array = { BRZ_local_party_support = 0.05 } # Griffonian Liberal Species Union
	add_to_array = { BRZ_local_party_support = 0.25 } # Socialist Party Of The Griffonian Empire
	add_to_array = { BRZ_local_party_support = 0.02 } # Workers Party Of Free Griffonia
	add_to_array = { BRZ_local_party_support = 0.2 } # Regionalists
	
	# No regionalist in the Inner Core
	if = {
		limit = { # Bronzehill + Imperial Core
			OR = {
				state = 492 # Bronzekreuz
				state = 539 # Crownspike
				state = 568 # Highhill
				state = 479 # Pineshades
				state = 424 # Raven Lakes
				state = 382 # Griffenheim
				state = 437 # Crona
				state = 405 # Interriver
				state = 397 # Helheim
				state = 555 # King's Realm
			}
		}
		
		# Remove seperatists in Bronzehill + Imperial Core
		set_variable = { BRZ_party_boost_buffer = -0.2 }
		set_variable = { BRZ_party_boost_selector = 6 }
		BRZ_add_to_party = yes
	}
	
	# Consider Culture
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 7 } # Aquleian
		}
		# Aquileian ponies
		set_variable = { BRZ_party_boost_buffer = 0.1 }
		set_variable = { BRZ_party_boost_selector = 3 } # Liberals
		BRZ_add_to_party = yes
		
		# Aquileian seperatists
		set_variable = { BRZ_party_boost_buffer = 0.3 }
		set_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 12 } # Northern Griffonian
		}
		
		# Northern seperatists
		set_variable = { BRZ_party_boost_buffer = 0.25 }
		set_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 15 } # Southern Griffonian
		}
		
		# Southern seperatists
		set_variable = { BRZ_party_boost_buffer = 0.6 }
		set_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 14 } # Eastern Pony (Posniak + Skynavia)
		}
		
		# Different species
		set_variable = { BRZ_party_boost_buffer = 0.5 }
		set_variable = { BRZ_party_boost_selector = 6 } # Liberals
		BRZ_add_to_party = yes
		
		# Pony seperatists
		set_variable = { BRZ_party_boost_buffer = 0.6 }
		set_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 9 } # Evian
		}
		# Evi seperatists
		set_variable = { BRZ_party_boost_buffer = 0.7 }
		set_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 11 } # Minotaur
		}
		# Different species
		set_variable = { BRZ_party_boost_buffer = 0.5 }
		set_variable = { BRZ_party_boost_selector = 3 } # Liberals
		BRZ_add_to_party = yes
		
		# Minotaur seperatists
		set_variable = { BRZ_party_boost_buffer = 0.8 }
		set_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 11 } # Diamand Dogs (outside Bronzehill)
			NOT = { state = 539 } # Crownspike 
			NOT = { state = 568 } # Highhill
		}
		
		# Dog species
		set_variable = { BRZ_party_boost_buffer = 0.2 }
		set_variable = { BRZ_party_boost_selector = 3 } # Liberals
		BRZ_add_to_party = yes
		
		# Dog-led party
		set_variable = { BRZ_party_boost_buffer = 0.2 }
		set_variable = { BRZ_party_boost_selector = 0 } # Conservatives
		BRZ_add_to_party = yes
		
		# Mountain seperatists
		set_variable = { BRZ_party_boost_buffer = 0.7 }
		set_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	# Special cases (History)
	if = {
		limit = { # Skyfall
			OR = {
				state = 381 # Skyfall
				state = 379 # Oldbeaken
				state = 380 # Griffton
				state = 396 # Vleugleland
			}
		}
		# Skyfall leftism
		set_variable = { BRZ_party_boost_buffer = 0.2 }
		set_variable = { BRZ_party_boost_selector = 4 } # Socialists
		BRZ_add_to_party = yes
		
		# Skyfall republicanism
		set_variable = { BRZ_party_boost_buffer = 0.2 }
		set_variable = { BRZ_party_boost_selector = 5 } # Radical Socialists
		BRZ_add_to_party = yes
		
		# Skyfall multiculturalism
		set_variable = { BRZ_party_boost_buffer = 0.5 }
		set_variable = { BRZ_party_boost_selector = 3 } # Liberals
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			state = 485 # Cloudbury
		}
		# Cloudbury republicanism
		set_variable = { BRZ_party_boost_buffer = 0.3 }
		set_variable = { BRZ_party_boost_selector = 5 } # Radical Socialists
		BRZ_add_to_party = yes
	}
	
	if = { # New Skynavia
		limit = {
			state = 522 # New Skynavia
		}
		
		# Skynavia republicanism
		set_variable = { BRZ_party_boost_buffer = 0.8 }
		set_variable = { BRZ_party_boost_selector = 5 } # Radical Socialists
		BRZ_add_to_party = yes
	}
	
	# Consider urban density
	if = {
		limit = {
			check_variable = { state_population_k > 1000 } # Million state
		}
		# Urban leftism
		set_variable = { BRZ_party_boost_buffer = 0.05 }
		set_variable = { BRZ_party_boost_selector = 4 } # Socialists
		BRZ_add_to_party = yes
	}
	if = {
		limit = {
			check_variable = { state_population_k > 2000 } # Two Million state
		}
		# Urban leftism
		set_variable = { BRZ_party_boost_buffer = 0.05 }
		set_variable = { BRZ_party_boost_selector = 4 } # Socialists
		BRZ_add_to_party = yes
	}
	if = {
		limit = {
			check_variable = { state_population_k > 3000 } # Three Million state
		}
		# Urban leftism
		set_variable = { BRZ_party_boost_buffer = 0.05 }
		set_variable = { BRZ_party_boost_selector = 4 } # Socialists
		BRZ_add_to_party = yes
	}
	if = {
		limit = {
			check_variable = { state_population_k < 500 } # Half million state
		}
		# Rural agrarianism
		set_variable = { BRZ_party_boost_buffer = 0.1 }
		set_variable = { BRZ_party_boost_selector = 1 } # Conservative agrarians
		BRZ_add_to_party = yes
		set_variable = { BRZ_party_boost_buffer = 0.1 }
		set_variable = { BRZ_party_boost_selector = 2 } # Socialist agrarians
		BRZ_add_to_party = yes
	}
	if = {
		limit = {
			check_variable = { state_population_k < 300 } # Sparse state
		}
		# Rural agrarianism
		set_variable = { BRZ_party_boost_buffer = 0.1 }
		set_variable = { BRZ_party_boost_selector = 1 } # Conservative agrarians
		BRZ_add_to_party = yes
		set_variable = { BRZ_party_boost_buffer = 0.1 }
		set_variable = { BRZ_party_boost_selector = 2 } # Socialist agrarians
		BRZ_add_to_party = yes
	}
	if = {
		limit = {
			check_variable = { state_population_k < 200 } # Very sparse state
		}
		# Rural agrarianism
		set_variable = { BRZ_party_boost_buffer = 0.1 }
		set_variable = { BRZ_party_boost_selector = 1 } # Conservative agrarians
		BRZ_add_to_party = yes
		set_variable = { BRZ_party_boost_buffer = 0.1 }
		set_variable = { BRZ_party_boost_selector = 2 } # Socialist agrarians
		BRZ_add_to_party = yes
	}
}

# Note: 
# The amount to add needs to be set beforehand in the BRZ_party_boost_buffer variable
# The party to add to needs to be set beforehand in the BRZ_party_boost_selector variable
# Also please note that the effect - despite of what it seems - does NOT work as to add the 
# absolute value of BRZ_party_boost_buffer to the party in question.
# This is because the total party support (logically) always has to be 100%. 
# Therefore, if the party e.g. has already 50% support, only 50% of the BRZ_party_boost_buffer will be added, 
# and if it would have 100%, nothing would be added. If it has 0%, then the full effect is added
# This is just a consequence of the normalization that's going on.
BRZ_add_to_party = {
	set_temp_variable = { reduction_factor = 1 }
	subtract_from_temp_variable = { reduction_factor = BRZ_party_boost_buffer }
	
	multiply_variable = { BRZ_local_party_support^0 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^1 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^2 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^3 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^4 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^5 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^6 = reduction_factor }
	
	add_to_variable = { BRZ_local_party_support^BRZ_party_boost_selector = BRZ_party_boost_buffer }
}

BRZ_puppeted_by_grover_ii = {
	# Load the flavour focus tree - keep_completed for Industry/Army trees
	load_focus_tree = {
		tree = bronzehill_grover_ii_tree
		keep_completed = yes
	}
	
	# If Powerstruggle, end immediately - Ignatius stays in Power
	if = {
		limit = {
			has_idea = BRZ_powerstruggle_in_the_council
		}
		remove_ideas = BRZ_powerstruggle_in_the_council
		
		remove_mission = BRZ_council_timeout_mission
		remove_mission = BRZ_copperhill_influence_mission
		remove_mission = BRZ_loudbark_influence_mission
		if = {
			limit = {
				has_country_flag = BRZ_luxembark_in_the_council
			}
			remove_mission = BRZ_luxembark_influence_mission
		} else = {
			remove_mission = BRZ_barkingsun_influence_mission
		}
		
		add_popularity = {
			ideology = neutrality
			popularity = 0.1
		}
	}
	
	# Remove maluses that would be removed by the now unavailable focus tree
	if = {
		limit = {
			has_idea = BRZ_disloyal_army
		}
		remove_ideas = BRZ_disloyal_army
	}
	if = {
		limit = {
			has_idea = BRZ_socialist_agitation
		}
		remove_ideas = BRZ_socialist_agitation
	}
	if = {
		limit = {
			has_idea = BRZ_lingering_socialist_agitation
		}
		remove_ideas = BRZ_lingering_socialist_agitation
	}
	if = {
		limit = {
			has_idea = BRZ_unrest_in_academia
		}
		remove_ideas = BRZ_unrest_in_academia
	}
	if = {
		limit = {
			has_idea = BRZ_hostile_ignatius
		}
		remove_ideas = BRZ_hostile_ignatius
	}
	if = {
		limit = {
			has_idea = BRZ_hostile_bronzehill_council
		}
		remove_ideas = BRZ_hostile_bronzehill_council
	}
}